package api

import "encoding/json"

type ServerContext struct {
	ConnectionAddress string
}
type disconnectionCallback = func(string)

//enums
{% for enum in module.enums: %}
type {{enum.name}} int

const (
{% for member in enum.members %}
{{member.unique_name}} = {{member.value}}
{% endfor %}
)
{% endfor %}

//structs
{% for struct in module.structs: %}
type {{struct.name}} struct {
{% for field in struct.fields %}
    {{field.cap_name}} {{field.go_type}} `json:"{{field.cap_name}}"`
{% endfor -%}
}
{% endfor %}

type ServerImpl interface {
    Serve()
    Stop()
}

type Server struct {
    servers []ServerImpl
}

func NewServer() *Server {
    return &Server{servers:make([]ServerImpl, 0)}
}

func(s *Server) AddServer(server ServerImpl) {
    s.servers = append(s.servers, server)
}

func(s *Server) Serve() {
    for _, server := range s.servers {
        server.Serve()
    }
}

func(s *Server) Stop() {}