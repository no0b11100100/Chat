// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chat_service.proto

#include "chat_service.pb.h"
#include "chat_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace chat {

static const char* Chat_method_names[] = {
  "/chat.Chat/getChats",
  "/chat.Chat/getMessages",
  "/chat.Chat/readMessage",
  "/chat.Chat/editChat",
  "/chat.Chat/chatChanged",
  "/chat.Chat/sendMessage",
  "/chat.Chat/recieveMessage",
};

std::unique_ptr< Chat::Stub> Chat::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Chat::Stub> stub(new Chat::Stub(channel, options));
  return stub;
}

Chat::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_getChats_(Chat_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getMessages_(Chat_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_readMessage_(Chat_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_editChat_(Chat_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_chatChanged_(Chat_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_sendMessage_(Chat_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_recieveMessage_(Chat_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status Chat::Stub::getChats(::grpc::ClientContext* context, const ::chat::UserID& request, ::chat::Chats* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chat::UserID, ::chat::Chats, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getChats_, context, request, response);
}

void Chat::Stub::async::getChats(::grpc::ClientContext* context, const ::chat::UserID* request, ::chat::Chats* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chat::UserID, ::chat::Chats, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getChats_, context, request, response, std::move(f));
}

void Chat::Stub::async::getChats(::grpc::ClientContext* context, const ::chat::UserID* request, ::chat::Chats* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getChats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chat::Chats>* Chat::Stub::PrepareAsyncgetChatsRaw(::grpc::ClientContext* context, const ::chat::UserID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::chat::Chats, ::chat::UserID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getChats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::chat::Chats>* Chat::Stub::AsyncgetChatsRaw(::grpc::ClientContext* context, const ::chat::UserID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetChatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Chat::Stub::getMessages(::grpc::ClientContext* context, const ::chat::MessageChan& request, ::chat::Messages* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chat::MessageChan, ::chat::Messages, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getMessages_, context, request, response);
}

void Chat::Stub::async::getMessages(::grpc::ClientContext* context, const ::chat::MessageChan* request, ::chat::Messages* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chat::MessageChan, ::chat::Messages, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMessages_, context, request, response, std::move(f));
}

void Chat::Stub::async::getMessages(::grpc::ClientContext* context, const ::chat::MessageChan* request, ::chat::Messages* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMessages_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chat::Messages>* Chat::Stub::PrepareAsyncgetMessagesRaw(::grpc::ClientContext* context, const ::chat::MessageChan& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::chat::Messages, ::chat::MessageChan, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getMessages_, context, request);
}

::grpc::ClientAsyncResponseReader< ::chat::Messages>* Chat::Stub::AsyncgetMessagesRaw(::grpc::ClientContext* context, const ::chat::MessageChan& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetMessagesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Chat::Stub::readMessage(::grpc::ClientContext* context, const ::chat::ReadMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chat::ReadMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_readMessage_, context, request, response);
}

void Chat::Stub::async::readMessage(::grpc::ClientContext* context, const ::chat::ReadMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chat::ReadMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_readMessage_, context, request, response, std::move(f));
}

void Chat::Stub::async::readMessage(::grpc::ClientContext* context, const ::chat::ReadMessage* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_readMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Chat::Stub::PrepareAsyncreadMessageRaw(::grpc::ClientContext* context, const ::chat::ReadMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::chat::ReadMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_readMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Chat::Stub::AsyncreadMessageRaw(::grpc::ClientContext* context, const ::chat::ReadMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreadMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Chat::Stub::editChat(::grpc::ClientContext* context, const ::chat::ChatData& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chat::ChatData, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_editChat_, context, request, response);
}

void Chat::Stub::async::editChat(::grpc::ClientContext* context, const ::chat::ChatData* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chat::ChatData, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_editChat_, context, request, response, std::move(f));
}

void Chat::Stub::async::editChat(::grpc::ClientContext* context, const ::chat::ChatData* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_editChat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Chat::Stub::PrepareAsynceditChatRaw(::grpc::ClientContext* context, const ::chat::ChatData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::chat::ChatData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_editChat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Chat::Stub::AsynceditChatRaw(::grpc::ClientContext* context, const ::chat::ChatData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynceditChatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::chat::ChatData>* Chat::Stub::chatChangedRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::chat::ChatData>::Create(channel_.get(), rpcmethod_chatChanged_, context, request);
}

void Chat::Stub::async::chatChanged(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::chat::ChatData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::chat::ChatData>::Create(stub_->channel_.get(), stub_->rpcmethod_chatChanged_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::chat::ChatData>* Chat::Stub::AsyncchatChangedRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::chat::ChatData>::Create(channel_.get(), cq, rpcmethod_chatChanged_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::chat::ChatData>* Chat::Stub::PrepareAsyncchatChangedRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::chat::ChatData>::Create(channel_.get(), cq, rpcmethod_chatChanged_, context, request, false, nullptr);
}

::grpc::Status Chat::Stub::sendMessage(::grpc::ClientContext* context, const ::chat::ExchangedMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chat::ExchangedMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_sendMessage_, context, request, response);
}

void Chat::Stub::async::sendMessage(::grpc::ClientContext* context, const ::chat::ExchangedMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chat::ExchangedMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendMessage_, context, request, response, std::move(f));
}

void Chat::Stub::async::sendMessage(::grpc::ClientContext* context, const ::chat::ExchangedMessage* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Chat::Stub::PrepareAsyncsendMessageRaw(::grpc::ClientContext* context, const ::chat::ExchangedMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::chat::ExchangedMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_sendMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Chat::Stub::AsyncsendMessageRaw(::grpc::ClientContext* context, const ::chat::ExchangedMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsendMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::chat::ExchangedMessage>* Chat::Stub::recieveMessageRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::chat::ExchangedMessage>::Create(channel_.get(), rpcmethod_recieveMessage_, context, request);
}

void Chat::Stub::async::recieveMessage(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::chat::ExchangedMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::chat::ExchangedMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_recieveMessage_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::chat::ExchangedMessage>* Chat::Stub::AsyncrecieveMessageRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::chat::ExchangedMessage>::Create(channel_.get(), cq, rpcmethod_recieveMessage_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::chat::ExchangedMessage>* Chat::Stub::PrepareAsyncrecieveMessageRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::chat::ExchangedMessage>::Create(channel_.get(), cq, rpcmethod_recieveMessage_, context, request, false, nullptr);
}

Chat::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Chat_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Chat::Service, ::chat::UserID, ::chat::Chats, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Chat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chat::UserID* req,
             ::chat::Chats* resp) {
               return service->getChats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Chat_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Chat::Service, ::chat::MessageChan, ::chat::Messages, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Chat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chat::MessageChan* req,
             ::chat::Messages* resp) {
               return service->getMessages(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Chat_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Chat::Service, ::chat::ReadMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Chat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chat::ReadMessage* req,
             ::google::protobuf::Empty* resp) {
               return service->readMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Chat_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Chat::Service, ::chat::ChatData, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Chat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chat::ChatData* req,
             ::google::protobuf::Empty* resp) {
               return service->editChat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Chat_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Chat::Service, ::google::protobuf::Empty, ::chat::ChatData>(
          [](Chat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::chat::ChatData>* writer) {
               return service->chatChanged(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Chat_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Chat::Service, ::chat::ExchangedMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Chat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chat::ExchangedMessage* req,
             ::google::protobuf::Empty* resp) {
               return service->sendMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Chat_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Chat::Service, ::google::protobuf::Empty, ::chat::ExchangedMessage>(
          [](Chat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::chat::ExchangedMessage>* writer) {
               return service->recieveMessage(ctx, req, writer);
             }, this)));
}

Chat::Service::~Service() {
}

::grpc::Status Chat::Service::getChats(::grpc::ServerContext* context, const ::chat::UserID* request, ::chat::Chats* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Chat::Service::getMessages(::grpc::ServerContext* context, const ::chat::MessageChan* request, ::chat::Messages* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Chat::Service::readMessage(::grpc::ServerContext* context, const ::chat::ReadMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Chat::Service::editChat(::grpc::ServerContext* context, const ::chat::ChatData* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Chat::Service::chatChanged(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::chat::ChatData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Chat::Service::sendMessage(::grpc::ServerContext* context, const ::chat::ExchangedMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Chat::Service::recieveMessage(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::chat::ExchangedMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace chat

