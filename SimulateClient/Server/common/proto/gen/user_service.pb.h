// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_user_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_user_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_user_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_5fservice_2eproto;
namespace user {
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class SignIn;
struct SignInDefaultTypeInternal;
extern SignInDefaultTypeInternal _SignIn_default_instance_;
class SignUp;
struct SignUpDefaultTypeInternal;
extern SignUpDefaultTypeInternal _SignUp_default_instance_;
class UserData;
struct UserDataDefaultTypeInternal;
extern UserDataDefaultTypeInternal _UserData_default_instance_;
}  // namespace user
PROTOBUF_NAMESPACE_OPEN
template<> ::user::Response* Arena::CreateMaybeMessage<::user::Response>(Arena*);
template<> ::user::SignIn* Arena::CreateMaybeMessage<::user::SignIn>(Arena*);
template<> ::user::SignUp* Arena::CreateMaybeMessage<::user::SignUp>(Arena*);
template<> ::user::UserData* Arena::CreateMaybeMessage<::user::UserData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace user {

enum ResponseStatus : int {
  OK = 0,
  Error = 1,
  ResponseStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ResponseStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ResponseStatus_IsValid(int value);
constexpr ResponseStatus ResponseStatus_MIN = OK;
constexpr ResponseStatus ResponseStatus_MAX = Error;
constexpr int ResponseStatus_ARRAYSIZE = ResponseStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseStatus_descriptor();
template<typename T>
inline const std::string& ResponseStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResponseStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResponseStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResponseStatus_descriptor(), enum_t_value);
}
inline bool ResponseStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResponseStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResponseStatus>(
    ResponseStatus_descriptor(), name, value);
}
// ===================================================================

class SignIn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.SignIn) */ {
 public:
  inline SignIn() : SignIn(nullptr) {}
  ~SignIn() override;
  explicit PROTOBUF_CONSTEXPR SignIn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignIn(const SignIn& from);
  SignIn(SignIn&& from) noexcept
    : SignIn() {
    *this = ::std::move(from);
  }

  inline SignIn& operator=(const SignIn& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignIn& operator=(SignIn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignIn& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignIn* internal_default_instance() {
    return reinterpret_cast<const SignIn*>(
               &_SignIn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SignIn& a, SignIn& b) {
    a.Swap(&b);
  }
  inline void Swap(SignIn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignIn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignIn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignIn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignIn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SignIn& from) {
    SignIn::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignIn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.SignIn";
  }
  protected:
  explicit SignIn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string email = 1;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:user.SignIn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SignUp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.SignUp) */ {
 public:
  inline SignUp() : SignUp(nullptr) {}
  ~SignUp() override;
  explicit PROTOBUF_CONSTEXPR SignUp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignUp(const SignUp& from);
  SignUp(SignUp&& from) noexcept
    : SignUp() {
    *this = ::std::move(from);
  }

  inline SignUp& operator=(const SignUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignUp& operator=(SignUp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignUp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignUp* internal_default_instance() {
    return reinterpret_cast<const SignUp*>(
               &_SignUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SignUp& a, SignUp& b) {
    a.Swap(&b);
  }
  inline void Swap(SignUp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignUp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignUp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignUp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SignUp& from) {
    SignUp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignUp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.SignUp";
  }
  protected:
  explicit SignUp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kNickNameFieldNumber = 2,
    kEmailFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kConfirmedPasswordFieldNumber = 5,
    kPhotoFieldNumber = 6,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string nickName = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string password = 4;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string confirmedPassword = 5;
  void clear_confirmedpassword();
  const std::string& confirmedpassword() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_confirmedpassword(ArgT0&& arg0, ArgT... args);
  std::string* mutable_confirmedpassword();
  PROTOBUF_NODISCARD std::string* release_confirmedpassword();
  void set_allocated_confirmedpassword(std::string* confirmedpassword);
  private:
  const std::string& _internal_confirmedpassword() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_confirmedpassword(const std::string& value);
  std::string* _internal_mutable_confirmedpassword();
  public:

  // string photo = 6;
  void clear_photo();
  const std::string& photo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_photo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_photo();
  PROTOBUF_NODISCARD std::string* release_photo();
  void set_allocated_photo(std::string* photo);
  private:
  const std::string& _internal_photo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_photo(const std::string& value);
  std::string* _internal_mutable_photo();
  public:

  // @@protoc_insertion_point(class_scope:user.SignUp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr confirmedpassword_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr photo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit PROTOBUF_CONSTEXPR Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Response& from) {
    Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kNickNameFieldNumber = 3,
    kPhotoFieldNumber = 4,
    kStatusMessageFieldNumber = 6,
    kStatusFieldNumber = 5,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string nickName = 3;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string photo = 4;
  void clear_photo();
  const std::string& photo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_photo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_photo();
  PROTOBUF_NODISCARD std::string* release_photo();
  void set_allocated_photo(std::string* photo);
  private:
  const std::string& _internal_photo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_photo(const std::string& value);
  std::string* _internal_mutable_photo();
  public:

  // string statusMessage = 6;
  void clear_statusmessage();
  const std::string& statusmessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_statusmessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_statusmessage();
  PROTOBUF_NODISCARD std::string* release_statusmessage();
  void set_allocated_statusmessage(std::string* statusmessage);
  private:
  const std::string& _internal_statusmessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_statusmessage(const std::string& value);
  std::string* _internal_mutable_statusmessage();
  public:

  // .user.ResponseStatus status = 5;
  void clear_status();
  ::user::ResponseStatus status() const;
  void set_status(::user::ResponseStatus value);
  private:
  ::user::ResponseStatus _internal_status() const;
  void _internal_set_status(::user::ResponseStatus value);
  public:

  // @@protoc_insertion_point(class_scope:user.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr photo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr statusmessage_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UserData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.UserData) */ {
 public:
  inline UserData() : UserData(nullptr) {}
  ~UserData() override;
  explicit PROTOBUF_CONSTEXPR UserData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserData(const UserData& from);
  UserData(UserData&& from) noexcept
    : UserData() {
    *this = ::std::move(from);
  }

  inline UserData& operator=(const UserData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserData& operator=(UserData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserData* internal_default_instance() {
    return reinterpret_cast<const UserData*>(
               &_UserData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserData& a, UserData& b) {
    a.Swap(&b);
  }
  inline void Swap(UserData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserData& from) {
    UserData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.UserData";
  }
  protected:
  explicit UserData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJsonFieldNumber = 1,
  };
  // string json = 1;
  void clear_json();
  const std::string& json() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json();
  PROTOBUF_NODISCARD std::string* release_json();
  void set_allocated_json(std::string* json);
  private:
  const std::string& _internal_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json(const std::string& value);
  std::string* _internal_mutable_json();
  public:

  // @@protoc_insertion_point(class_scope:user.UserData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SignIn

// string email = 1;
inline void SignIn::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& SignIn::email() const {
  // @@protoc_insertion_point(field_get:user.SignIn.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignIn::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.SignIn.email)
}
inline std::string* SignIn::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:user.SignIn.email)
  return _s;
}
inline const std::string& SignIn::_internal_email() const {
  return _impl_.email_.Get();
}
inline void SignIn::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* SignIn::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* SignIn::release_email() {
  // @@protoc_insertion_point(field_release:user.SignIn.email)
  return _impl_.email_.Release();
}
inline void SignIn::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.SignIn.email)
}

// string password = 2;
inline void SignIn::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& SignIn::password() const {
  // @@protoc_insertion_point(field_get:user.SignIn.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignIn::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.SignIn.password)
}
inline std::string* SignIn::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:user.SignIn.password)
  return _s;
}
inline const std::string& SignIn::_internal_password() const {
  return _impl_.password_.Get();
}
inline void SignIn::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* SignIn::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* SignIn::release_password() {
  // @@protoc_insertion_point(field_release:user.SignIn.password)
  return _impl_.password_.Release();
}
inline void SignIn::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.SignIn.password)
}

// -------------------------------------------------------------------

// SignUp

// string name = 1;
inline void SignUp::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SignUp::name() const {
  // @@protoc_insertion_point(field_get:user.SignUp.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignUp::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.SignUp.name)
}
inline std::string* SignUp::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:user.SignUp.name)
  return _s;
}
inline const std::string& SignUp::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SignUp::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SignUp::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SignUp::release_name() {
  // @@protoc_insertion_point(field_release:user.SignUp.name)
  return _impl_.name_.Release();
}
inline void SignUp::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.SignUp.name)
}

// string nickName = 2;
inline void SignUp::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& SignUp::nickname() const {
  // @@protoc_insertion_point(field_get:user.SignUp.nickName)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignUp::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.SignUp.nickName)
}
inline std::string* SignUp::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:user.SignUp.nickName)
  return _s;
}
inline const std::string& SignUp::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void SignUp::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* SignUp::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* SignUp::release_nickname() {
  // @@protoc_insertion_point(field_release:user.SignUp.nickName)
  return _impl_.nickname_.Release();
}
inline void SignUp::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.SignUp.nickName)
}

// string email = 3;
inline void SignUp::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& SignUp::email() const {
  // @@protoc_insertion_point(field_get:user.SignUp.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignUp::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.SignUp.email)
}
inline std::string* SignUp::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:user.SignUp.email)
  return _s;
}
inline const std::string& SignUp::_internal_email() const {
  return _impl_.email_.Get();
}
inline void SignUp::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* SignUp::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* SignUp::release_email() {
  // @@protoc_insertion_point(field_release:user.SignUp.email)
  return _impl_.email_.Release();
}
inline void SignUp::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.SignUp.email)
}

// string password = 4;
inline void SignUp::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& SignUp::password() const {
  // @@protoc_insertion_point(field_get:user.SignUp.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignUp::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.SignUp.password)
}
inline std::string* SignUp::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:user.SignUp.password)
  return _s;
}
inline const std::string& SignUp::_internal_password() const {
  return _impl_.password_.Get();
}
inline void SignUp::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* SignUp::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* SignUp::release_password() {
  // @@protoc_insertion_point(field_release:user.SignUp.password)
  return _impl_.password_.Release();
}
inline void SignUp::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.SignUp.password)
}

// string confirmedPassword = 5;
inline void SignUp::clear_confirmedpassword() {
  _impl_.confirmedpassword_.ClearToEmpty();
}
inline const std::string& SignUp::confirmedpassword() const {
  // @@protoc_insertion_point(field_get:user.SignUp.confirmedPassword)
  return _internal_confirmedpassword();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignUp::set_confirmedpassword(ArgT0&& arg0, ArgT... args) {
 
 _impl_.confirmedpassword_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.SignUp.confirmedPassword)
}
inline std::string* SignUp::mutable_confirmedpassword() {
  std::string* _s = _internal_mutable_confirmedpassword();
  // @@protoc_insertion_point(field_mutable:user.SignUp.confirmedPassword)
  return _s;
}
inline const std::string& SignUp::_internal_confirmedpassword() const {
  return _impl_.confirmedpassword_.Get();
}
inline void SignUp::_internal_set_confirmedpassword(const std::string& value) {
  
  _impl_.confirmedpassword_.Set(value, GetArenaForAllocation());
}
inline std::string* SignUp::_internal_mutable_confirmedpassword() {
  
  return _impl_.confirmedpassword_.Mutable(GetArenaForAllocation());
}
inline std::string* SignUp::release_confirmedpassword() {
  // @@protoc_insertion_point(field_release:user.SignUp.confirmedPassword)
  return _impl_.confirmedpassword_.Release();
}
inline void SignUp::set_allocated_confirmedpassword(std::string* confirmedpassword) {
  if (confirmedpassword != nullptr) {
    
  } else {
    
  }
  _impl_.confirmedpassword_.SetAllocated(confirmedpassword, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.confirmedpassword_.IsDefault()) {
    _impl_.confirmedpassword_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.SignUp.confirmedPassword)
}

// string photo = 6;
inline void SignUp::clear_photo() {
  _impl_.photo_.ClearToEmpty();
}
inline const std::string& SignUp::photo() const {
  // @@protoc_insertion_point(field_get:user.SignUp.photo)
  return _internal_photo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignUp::set_photo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.photo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.SignUp.photo)
}
inline std::string* SignUp::mutable_photo() {
  std::string* _s = _internal_mutable_photo();
  // @@protoc_insertion_point(field_mutable:user.SignUp.photo)
  return _s;
}
inline const std::string& SignUp::_internal_photo() const {
  return _impl_.photo_.Get();
}
inline void SignUp::_internal_set_photo(const std::string& value) {
  
  _impl_.photo_.Set(value, GetArenaForAllocation());
}
inline std::string* SignUp::_internal_mutable_photo() {
  
  return _impl_.photo_.Mutable(GetArenaForAllocation());
}
inline std::string* SignUp::release_photo() {
  // @@protoc_insertion_point(field_release:user.SignUp.photo)
  return _impl_.photo_.Release();
}
inline void SignUp::set_allocated_photo(std::string* photo) {
  if (photo != nullptr) {
    
  } else {
    
  }
  _impl_.photo_.SetAllocated(photo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.photo_.IsDefault()) {
    _impl_.photo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.SignUp.photo)
}

// -------------------------------------------------------------------

// Response

// string user_id = 1;
inline void Response::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& Response::user_id() const {
  // @@protoc_insertion_point(field_get:user.Response.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.Response.user_id)
}
inline std::string* Response::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:user.Response.user_id)
  return _s;
}
inline const std::string& Response::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void Response::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Response::release_user_id() {
  // @@protoc_insertion_point(field_release:user.Response.user_id)
  return _impl_.user_id_.Release();
}
inline void Response::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.Response.user_id)
}

// string name = 2;
inline void Response::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Response::name() const {
  // @@protoc_insertion_point(field_get:user.Response.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.Response.name)
}
inline std::string* Response::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:user.Response.name)
  return _s;
}
inline const std::string& Response::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Response::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Response::release_name() {
  // @@protoc_insertion_point(field_release:user.Response.name)
  return _impl_.name_.Release();
}
inline void Response::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.Response.name)
}

// string nickName = 3;
inline void Response::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& Response::nickname() const {
  // @@protoc_insertion_point(field_get:user.Response.nickName)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.Response.nickName)
}
inline std::string* Response::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:user.Response.nickName)
  return _s;
}
inline const std::string& Response::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void Response::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* Response::release_nickname() {
  // @@protoc_insertion_point(field_release:user.Response.nickName)
  return _impl_.nickname_.Release();
}
inline void Response::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.Response.nickName)
}

// string photo = 4;
inline void Response::clear_photo() {
  _impl_.photo_.ClearToEmpty();
}
inline const std::string& Response::photo() const {
  // @@protoc_insertion_point(field_get:user.Response.photo)
  return _internal_photo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response::set_photo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.photo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.Response.photo)
}
inline std::string* Response::mutable_photo() {
  std::string* _s = _internal_mutable_photo();
  // @@protoc_insertion_point(field_mutable:user.Response.photo)
  return _s;
}
inline const std::string& Response::_internal_photo() const {
  return _impl_.photo_.Get();
}
inline void Response::_internal_set_photo(const std::string& value) {
  
  _impl_.photo_.Set(value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_photo() {
  
  return _impl_.photo_.Mutable(GetArenaForAllocation());
}
inline std::string* Response::release_photo() {
  // @@protoc_insertion_point(field_release:user.Response.photo)
  return _impl_.photo_.Release();
}
inline void Response::set_allocated_photo(std::string* photo) {
  if (photo != nullptr) {
    
  } else {
    
  }
  _impl_.photo_.SetAllocated(photo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.photo_.IsDefault()) {
    _impl_.photo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.Response.photo)
}

// .user.ResponseStatus status = 5;
inline void Response::clear_status() {
  _impl_.status_ = 0;
}
inline ::user::ResponseStatus Response::_internal_status() const {
  return static_cast< ::user::ResponseStatus >(_impl_.status_);
}
inline ::user::ResponseStatus Response::status() const {
  // @@protoc_insertion_point(field_get:user.Response.status)
  return _internal_status();
}
inline void Response::_internal_set_status(::user::ResponseStatus value) {
  
  _impl_.status_ = value;
}
inline void Response::set_status(::user::ResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:user.Response.status)
}

// string statusMessage = 6;
inline void Response::clear_statusmessage() {
  _impl_.statusmessage_.ClearToEmpty();
}
inline const std::string& Response::statusmessage() const {
  // @@protoc_insertion_point(field_get:user.Response.statusMessage)
  return _internal_statusmessage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response::set_statusmessage(ArgT0&& arg0, ArgT... args) {
 
 _impl_.statusmessage_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.Response.statusMessage)
}
inline std::string* Response::mutable_statusmessage() {
  std::string* _s = _internal_mutable_statusmessage();
  // @@protoc_insertion_point(field_mutable:user.Response.statusMessage)
  return _s;
}
inline const std::string& Response::_internal_statusmessage() const {
  return _impl_.statusmessage_.Get();
}
inline void Response::_internal_set_statusmessage(const std::string& value) {
  
  _impl_.statusmessage_.Set(value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_statusmessage() {
  
  return _impl_.statusmessage_.Mutable(GetArenaForAllocation());
}
inline std::string* Response::release_statusmessage() {
  // @@protoc_insertion_point(field_release:user.Response.statusMessage)
  return _impl_.statusmessage_.Release();
}
inline void Response::set_allocated_statusmessage(std::string* statusmessage) {
  if (statusmessage != nullptr) {
    
  } else {
    
  }
  _impl_.statusmessage_.SetAllocated(statusmessage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.statusmessage_.IsDefault()) {
    _impl_.statusmessage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.Response.statusMessage)
}

// -------------------------------------------------------------------

// UserData

// string json = 1;
inline void UserData::clear_json() {
  _impl_.json_.ClearToEmpty();
}
inline const std::string& UserData::json() const {
  // @@protoc_insertion_point(field_get:user.UserData.json)
  return _internal_json();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserData::set_json(ArgT0&& arg0, ArgT... args) {
 
 _impl_.json_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.UserData.json)
}
inline std::string* UserData::mutable_json() {
  std::string* _s = _internal_mutable_json();
  // @@protoc_insertion_point(field_mutable:user.UserData.json)
  return _s;
}
inline const std::string& UserData::_internal_json() const {
  return _impl_.json_.Get();
}
inline void UserData::_internal_set_json(const std::string& value) {
  
  _impl_.json_.Set(value, GetArenaForAllocation());
}
inline std::string* UserData::_internal_mutable_json() {
  
  return _impl_.json_.Mutable(GetArenaForAllocation());
}
inline std::string* UserData::release_json() {
  // @@protoc_insertion_point(field_release:user.UserData.json)
  return _impl_.json_.Release();
}
inline void UserData::set_allocated_json(std::string* json) {
  if (json != nullptr) {
    
  } else {
    
  }
  _impl_.json_.SetAllocated(json, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.json_.IsDefault()) {
    _impl_.json_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.UserData.json)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace user

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::user::ResponseStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::user::ResponseStatus>() {
  return ::user::ResponseStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_user_5fservice_2eproto
