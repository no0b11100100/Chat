// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: calendar_service.proto

#include "calendar_service.pb.h"
#include "calendar_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace calendar {

static const char* CalendarService_method_names[] = {
  "/calendar.CalendarService/sendEvent",
  "/calendar.CalendarService/recieveEvent",
  "/calendar.CalendarService/getEvents",
};

std::unique_ptr< CalendarService::Stub> CalendarService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CalendarService::Stub> stub(new CalendarService::Stub(channel, options));
  return stub;
}

CalendarService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_sendEvent_(CalendarService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_recieveEvent_(CalendarService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_getEvents_(CalendarService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CalendarService::Stub::sendEvent(::grpc::ClientContext* context, const ::calendar::Event& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::calendar::Event, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_sendEvent_, context, request, response);
}

void CalendarService::Stub::async::sendEvent(::grpc::ClientContext* context, const ::calendar::Event* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::calendar::Event, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendEvent_, context, request, response, std::move(f));
}

void CalendarService::Stub::async::sendEvent(::grpc::ClientContext* context, const ::calendar::Event* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendEvent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CalendarService::Stub::PrepareAsyncsendEventRaw(::grpc::ClientContext* context, const ::calendar::Event& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::calendar::Event, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_sendEvent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CalendarService::Stub::AsyncsendEventRaw(::grpc::ClientContext* context, const ::calendar::Event& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsendEventRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::calendar::Event>* CalendarService::Stub::recieveEventRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::calendar::Event>::Create(channel_.get(), rpcmethod_recieveEvent_, context, request);
}

void CalendarService::Stub::async::recieveEvent(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::calendar::Event>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::calendar::Event>::Create(stub_->channel_.get(), stub_->rpcmethod_recieveEvent_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::calendar::Event>* CalendarService::Stub::AsyncrecieveEventRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::calendar::Event>::Create(channel_.get(), cq, rpcmethod_recieveEvent_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::calendar::Event>* CalendarService::Stub::PrepareAsyncrecieveEventRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::calendar::Event>::Create(channel_.get(), cq, rpcmethod_recieveEvent_, context, request, false, nullptr);
}

::grpc::Status CalendarService::Stub::getEvents(::grpc::ClientContext* context, const ::calendar::Week& request, ::calendar::Events* response) {
  return ::grpc::internal::BlockingUnaryCall< ::calendar::Week, ::calendar::Events, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getEvents_, context, request, response);
}

void CalendarService::Stub::async::getEvents(::grpc::ClientContext* context, const ::calendar::Week* request, ::calendar::Events* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::calendar::Week, ::calendar::Events, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getEvents_, context, request, response, std::move(f));
}

void CalendarService::Stub::async::getEvents(::grpc::ClientContext* context, const ::calendar::Week* request, ::calendar::Events* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getEvents_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::calendar::Events>* CalendarService::Stub::PrepareAsyncgetEventsRaw(::grpc::ClientContext* context, const ::calendar::Week& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::calendar::Events, ::calendar::Week, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getEvents_, context, request);
}

::grpc::ClientAsyncResponseReader< ::calendar::Events>* CalendarService::Stub::AsyncgetEventsRaw(::grpc::ClientContext* context, const ::calendar::Week& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetEventsRaw(context, request, cq);
  result->StartCall();
  return result;
}

CalendarService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CalendarService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CalendarService::Service, ::calendar::Event, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CalendarService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::calendar::Event* req,
             ::google::protobuf::Empty* resp) {
               return service->sendEvent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CalendarService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< CalendarService::Service, ::google::protobuf::Empty, ::calendar::Event>(
          [](CalendarService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::calendar::Event>* writer) {
               return service->recieveEvent(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CalendarService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CalendarService::Service, ::calendar::Week, ::calendar::Events, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CalendarService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::calendar::Week* req,
             ::calendar::Events* resp) {
               return service->getEvents(ctx, req, resp);
             }, this)));
}

CalendarService::Service::~Service() {
}

::grpc::Status CalendarService::Service::sendEvent(::grpc::ServerContext* context, const ::calendar::Event* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CalendarService::Service::recieveEvent(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::calendar::Event>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CalendarService::Service::getEvents(::grpc::ServerContext* context, const ::calendar::Week* request, ::calendar::Events* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace calendar

