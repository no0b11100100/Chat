// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calendar_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_calendar_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_calendar_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_calendar_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_calendar_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_calendar_5fservice_2eproto;
namespace calendar {
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Events;
struct EventsDefaultTypeInternal;
extern EventsDefaultTypeInternal _Events_default_instance_;
class Week;
struct WeekDefaultTypeInternal;
extern WeekDefaultTypeInternal _Week_default_instance_;
}  // namespace calendar
PROTOBUF_NAMESPACE_OPEN
template<> ::calendar::Event* Arena::CreateMaybeMessage<::calendar::Event>(Arena*);
template<> ::calendar::Events* Arena::CreateMaybeMessage<::calendar::Events>(Arena*);
template<> ::calendar::Week* Arena::CreateMaybeMessage<::calendar::Week>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace calendar {

// ===================================================================

class Event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:calendar.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() override;
  explicit PROTOBUF_CONSTEXPR Event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Event& from) {
    Event::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "calendar.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventIdFieldNumber = 1,
  };
  // string eventId = 1;
  void clear_eventid();
  const std::string& eventid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_eventid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_eventid();
  PROTOBUF_NODISCARD std::string* release_eventid();
  void set_allocated_eventid(std::string* eventid);
  private:
  const std::string& _internal_eventid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_eventid(const std::string& value);
  std::string* _internal_mutable_eventid();
  public:

  // @@protoc_insertion_point(class_scope:calendar.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eventid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_calendar_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Week final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:calendar.Week) */ {
 public:
  inline Week() : Week(nullptr) {}
  ~Week() override;
  explicit PROTOBUF_CONSTEXPR Week(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Week(const Week& from);
  Week(Week&& from) noexcept
    : Week() {
    *this = ::std::move(from);
  }

  inline Week& operator=(const Week& from) {
    CopyFrom(from);
    return *this;
  }
  inline Week& operator=(Week&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Week& default_instance() {
    return *internal_default_instance();
  }
  static inline const Week* internal_default_instance() {
    return reinterpret_cast<const Week*>(
               &_Week_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Week& a, Week& b) {
    a.Swap(&b);
  }
  inline void Swap(Week* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Week* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Week* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Week>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Week& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Week& from) {
    Week::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Week* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "calendar.Week";
  }
  protected:
  explicit Week(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeekFieldNumber = 1,
  };
  // int32 week = 1;
  void clear_week();
  int32_t week() const;
  void set_week(int32_t value);
  private:
  int32_t _internal_week() const;
  void _internal_set_week(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:calendar.Week)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t week_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_calendar_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Events final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:calendar.Events) */ {
 public:
  inline Events() : Events(nullptr) {}
  ~Events() override;
  explicit PROTOBUF_CONSTEXPR Events(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Events(const Events& from);
  Events(Events&& from) noexcept
    : Events() {
    *this = ::std::move(from);
  }

  inline Events& operator=(const Events& from) {
    CopyFrom(from);
    return *this;
  }
  inline Events& operator=(Events&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Events& default_instance() {
    return *internal_default_instance();
  }
  static inline const Events* internal_default_instance() {
    return reinterpret_cast<const Events*>(
               &_Events_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Events& a, Events& b) {
    a.Swap(&b);
  }
  inline void Swap(Events* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Events* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Events* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Events>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Events& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Events& from) {
    Events::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Events* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "calendar.Events";
  }
  protected:
  explicit Events(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
  };
  // repeated string events = 1;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  const std::string& events(int index) const;
  std::string* mutable_events(int index);
  void set_events(int index, const std::string& value);
  void set_events(int index, std::string&& value);
  void set_events(int index, const char* value);
  void set_events(int index, const char* value, size_t size);
  std::string* add_events();
  void add_events(const std::string& value);
  void add_events(std::string&& value);
  void add_events(const char* value);
  void add_events(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_events();
  private:
  const std::string& _internal_events(int index) const;
  std::string* _internal_add_events();
  public:

  // @@protoc_insertion_point(class_scope:calendar.Events)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> events_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_calendar_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Event

// string eventId = 1;
inline void Event::clear_eventid() {
  _impl_.eventid_.ClearToEmpty();
}
inline const std::string& Event::eventid() const {
  // @@protoc_insertion_point(field_get:calendar.Event.eventId)
  return _internal_eventid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Event::set_eventid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.eventid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:calendar.Event.eventId)
}
inline std::string* Event::mutable_eventid() {
  std::string* _s = _internal_mutable_eventid();
  // @@protoc_insertion_point(field_mutable:calendar.Event.eventId)
  return _s;
}
inline const std::string& Event::_internal_eventid() const {
  return _impl_.eventid_.Get();
}
inline void Event::_internal_set_eventid(const std::string& value) {
  
  _impl_.eventid_.Set(value, GetArenaForAllocation());
}
inline std::string* Event::_internal_mutable_eventid() {
  
  return _impl_.eventid_.Mutable(GetArenaForAllocation());
}
inline std::string* Event::release_eventid() {
  // @@protoc_insertion_point(field_release:calendar.Event.eventId)
  return _impl_.eventid_.Release();
}
inline void Event::set_allocated_eventid(std::string* eventid) {
  if (eventid != nullptr) {
    
  } else {
    
  }
  _impl_.eventid_.SetAllocated(eventid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.eventid_.IsDefault()) {
    _impl_.eventid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:calendar.Event.eventId)
}

// -------------------------------------------------------------------

// Week

// int32 week = 1;
inline void Week::clear_week() {
  _impl_.week_ = 0;
}
inline int32_t Week::_internal_week() const {
  return _impl_.week_;
}
inline int32_t Week::week() const {
  // @@protoc_insertion_point(field_get:calendar.Week.week)
  return _internal_week();
}
inline void Week::_internal_set_week(int32_t value) {
  
  _impl_.week_ = value;
}
inline void Week::set_week(int32_t value) {
  _internal_set_week(value);
  // @@protoc_insertion_point(field_set:calendar.Week.week)
}

// -------------------------------------------------------------------

// Events

// repeated string events = 1;
inline int Events::_internal_events_size() const {
  return _impl_.events_.size();
}
inline int Events::events_size() const {
  return _internal_events_size();
}
inline void Events::clear_events() {
  _impl_.events_.Clear();
}
inline std::string* Events::add_events() {
  std::string* _s = _internal_add_events();
  // @@protoc_insertion_point(field_add_mutable:calendar.Events.events)
  return _s;
}
inline const std::string& Events::_internal_events(int index) const {
  return _impl_.events_.Get(index);
}
inline const std::string& Events::events(int index) const {
  // @@protoc_insertion_point(field_get:calendar.Events.events)
  return _internal_events(index);
}
inline std::string* Events::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:calendar.Events.events)
  return _impl_.events_.Mutable(index);
}
inline void Events::set_events(int index, const std::string& value) {
  _impl_.events_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:calendar.Events.events)
}
inline void Events::set_events(int index, std::string&& value) {
  _impl_.events_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:calendar.Events.events)
}
inline void Events::set_events(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.events_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:calendar.Events.events)
}
inline void Events::set_events(int index, const char* value, size_t size) {
  _impl_.events_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:calendar.Events.events)
}
inline std::string* Events::_internal_add_events() {
  return _impl_.events_.Add();
}
inline void Events::add_events(const std::string& value) {
  _impl_.events_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:calendar.Events.events)
}
inline void Events::add_events(std::string&& value) {
  _impl_.events_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:calendar.Events.events)
}
inline void Events::add_events(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.events_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:calendar.Events.events)
}
inline void Events::add_events(const char* value, size_t size) {
  _impl_.events_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:calendar.Events.events)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Events::events() const {
  // @@protoc_insertion_point(field_list:calendar.Events.events)
  return _impl_.events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Events::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:calendar.Events.events)
  return &_impl_.events_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace calendar

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_calendar_5fservice_2eproto
