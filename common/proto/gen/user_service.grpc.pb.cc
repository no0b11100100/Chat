// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: user_service.proto

#include "user_service.pb.h"
#include "user_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace user {

static const char* User_method_names[] = {
  "/user.User/signIn",
  "/user.User/signUp",
  "/user.User/editUser",
};

std::unique_ptr< User::Stub> User::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< User::Stub> stub(new User::Stub(channel, options));
  return stub;
}

User::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_signIn_(User_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_signUp_(User_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_editUser_(User_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status User::Stub::signIn(::grpc::ClientContext* context, const ::user::SignIn& request, ::user::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::user::SignIn, ::user::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_signIn_, context, request, response);
}

void User::Stub::async::signIn(::grpc::ClientContext* context, const ::user::SignIn* request, ::user::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::user::SignIn, ::user::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_signIn_, context, request, response, std::move(f));
}

void User::Stub::async::signIn(::grpc::ClientContext* context, const ::user::SignIn* request, ::user::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_signIn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user::Response>* User::Stub::PrepareAsyncsignInRaw(::grpc::ClientContext* context, const ::user::SignIn& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::user::Response, ::user::SignIn, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_signIn_, context, request);
}

::grpc::ClientAsyncResponseReader< ::user::Response>* User::Stub::AsyncsignInRaw(::grpc::ClientContext* context, const ::user::SignIn& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsignInRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::signUp(::grpc::ClientContext* context, const ::user::SignUp& request, ::user::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::user::SignUp, ::user::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_signUp_, context, request, response);
}

void User::Stub::async::signUp(::grpc::ClientContext* context, const ::user::SignUp* request, ::user::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::user::SignUp, ::user::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_signUp_, context, request, response, std::move(f));
}

void User::Stub::async::signUp(::grpc::ClientContext* context, const ::user::SignUp* request, ::user::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_signUp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user::Response>* User::Stub::PrepareAsyncsignUpRaw(::grpc::ClientContext* context, const ::user::SignUp& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::user::Response, ::user::SignUp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_signUp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::user::Response>* User::Stub::AsyncsignUpRaw(::grpc::ClientContext* context, const ::user::SignUp& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsignUpRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::editUser(::grpc::ClientContext* context, const ::user::UserData& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::user::UserData, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_editUser_, context, request, response);
}

void User::Stub::async::editUser(::grpc::ClientContext* context, const ::user::UserData* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::user::UserData, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_editUser_, context, request, response, std::move(f));
}

void User::Stub::async::editUser(::grpc::ClientContext* context, const ::user::UserData* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_editUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsynceditUserRaw(::grpc::ClientContext* context, const ::user::UserData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::user::UserData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_editUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsynceditUserRaw(::grpc::ClientContext* context, const ::user::UserData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynceditUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

User::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::user::SignIn, ::user::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::user::SignIn* req,
             ::user::Response* resp) {
               return service->signIn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::user::SignUp, ::user::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::user::SignUp* req,
             ::user::Response* resp) {
               return service->signUp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::user::UserData, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::user::UserData* req,
             ::google::protobuf::Empty* resp) {
               return service->editUser(ctx, req, resp);
             }, this)));
}

User::Service::~Service() {
}

::grpc::Status User::Service::signIn(::grpc::ServerContext* context, const ::user::SignIn* request, ::user::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::signUp(::grpc::ServerContext* context, const ::user::SignUp* request, ::user::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::editUser(::grpc::ServerContext* context, const ::user::UserData* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace user

