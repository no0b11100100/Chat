// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chat_service.proto
#ifndef GRPC_chat_5fservice_2eproto__INCLUDED
#define GRPC_chat_5fservice_2eproto__INCLUDED

#include "chat_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace chat {

class Chat final {
 public:
  static constexpr char const* service_full_name() {
    return "chat.Chat";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status getChats(::grpc::ClientContext* context, const ::chat::UserID& request, ::chat::Chats* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::Chats>> AsyncgetChats(::grpc::ClientContext* context, const ::chat::UserID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::Chats>>(AsyncgetChatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::Chats>> PrepareAsyncgetChats(::grpc::ClientContext* context, const ::chat::UserID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::Chats>>(PrepareAsyncgetChatsRaw(context, request, cq));
    }
    virtual ::grpc::Status getMessages(::grpc::ClientContext* context, const ::chat::MessageChan& request, ::chat::Messages* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::Messages>> AsyncgetMessages(::grpc::ClientContext* context, const ::chat::MessageChan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::Messages>>(AsyncgetMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::Messages>> PrepareAsyncgetMessages(::grpc::ClientContext* context, const ::chat::MessageChan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::Messages>>(PrepareAsyncgetMessagesRaw(context, request, cq));
    }
    virtual ::grpc::Status readMessage(::grpc::ClientContext* context, const ::chat::ReadMessage& request, ::chat::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::Status>> AsyncreadMessage(::grpc::ClientContext* context, const ::chat::ReadMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::Status>>(AsyncreadMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::Status>> PrepareAsyncreadMessage(::grpc::ClientContext* context, const ::chat::ReadMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::Status>>(PrepareAsyncreadMessageRaw(context, request, cq));
    }
    virtual ::grpc::Status editChat(::grpc::ClientContext* context, const ::chat::ChatData& request, ::chat::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::Status>> AsynceditChat(::grpc::ClientContext* context, const ::chat::ChatData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::Status>>(AsynceditChatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::Status>> PrepareAsynceditChat(::grpc::ClientContext* context, const ::chat::ChatData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::Status>>(PrepareAsynceditChatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::chat::ChatData>> chatChanged(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::chat::ChatData>>(chatChangedRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::chat::ChatData>> AsyncchatChanged(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::chat::ChatData>>(AsyncchatChangedRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::chat::ChatData>> PrepareAsyncchatChanged(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::chat::ChatData>>(PrepareAsyncchatChangedRaw(context, request, cq));
    }
    virtual ::grpc::Status sendMessage(::grpc::ClientContext* context, const ::chat::ExchangedMessage& request, ::chat::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::Status>> AsyncsendMessage(::grpc::ClientContext* context, const ::chat::ExchangedMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::Status>>(AsyncsendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::Status>> PrepareAsyncsendMessage(::grpc::ClientContext* context, const ::chat::ExchangedMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::Status>>(PrepareAsyncsendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::chat::ExchangedMessage>> recieveMessage(::grpc::ClientContext* context, const ::chat::UserID& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::chat::ExchangedMessage>>(recieveMessageRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::chat::ExchangedMessage>> AsyncrecieveMessage(::grpc::ClientContext* context, const ::chat::UserID& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::chat::ExchangedMessage>>(AsyncrecieveMessageRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::chat::ExchangedMessage>> PrepareAsyncrecieveMessage(::grpc::ClientContext* context, const ::chat::UserID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::chat::ExchangedMessage>>(PrepareAsyncrecieveMessageRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void getChats(::grpc::ClientContext* context, const ::chat::UserID* request, ::chat::Chats* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getChats(::grpc::ClientContext* context, const ::chat::UserID* request, ::chat::Chats* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getMessages(::grpc::ClientContext* context, const ::chat::MessageChan* request, ::chat::Messages* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getMessages(::grpc::ClientContext* context, const ::chat::MessageChan* request, ::chat::Messages* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void readMessage(::grpc::ClientContext* context, const ::chat::ReadMessage* request, ::chat::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void readMessage(::grpc::ClientContext* context, const ::chat::ReadMessage* request, ::chat::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void editChat(::grpc::ClientContext* context, const ::chat::ChatData* request, ::chat::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void editChat(::grpc::ClientContext* context, const ::chat::ChatData* request, ::chat::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void chatChanged(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::chat::ChatData>* reactor) = 0;
      virtual void sendMessage(::grpc::ClientContext* context, const ::chat::ExchangedMessage* request, ::chat::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendMessage(::grpc::ClientContext* context, const ::chat::ExchangedMessage* request, ::chat::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void recieveMessage(::grpc::ClientContext* context, const ::chat::UserID* request, ::grpc::ClientReadReactor< ::chat::ExchangedMessage>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chat::Chats>* AsyncgetChatsRaw(::grpc::ClientContext* context, const ::chat::UserID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chat::Chats>* PrepareAsyncgetChatsRaw(::grpc::ClientContext* context, const ::chat::UserID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chat::Messages>* AsyncgetMessagesRaw(::grpc::ClientContext* context, const ::chat::MessageChan& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chat::Messages>* PrepareAsyncgetMessagesRaw(::grpc::ClientContext* context, const ::chat::MessageChan& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chat::Status>* AsyncreadMessageRaw(::grpc::ClientContext* context, const ::chat::ReadMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chat::Status>* PrepareAsyncreadMessageRaw(::grpc::ClientContext* context, const ::chat::ReadMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chat::Status>* AsynceditChatRaw(::grpc::ClientContext* context, const ::chat::ChatData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chat::Status>* PrepareAsynceditChatRaw(::grpc::ClientContext* context, const ::chat::ChatData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::chat::ChatData>* chatChangedRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::chat::ChatData>* AsyncchatChangedRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::chat::ChatData>* PrepareAsyncchatChangedRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chat::Status>* AsyncsendMessageRaw(::grpc::ClientContext* context, const ::chat::ExchangedMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chat::Status>* PrepareAsyncsendMessageRaw(::grpc::ClientContext* context, const ::chat::ExchangedMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::chat::ExchangedMessage>* recieveMessageRaw(::grpc::ClientContext* context, const ::chat::UserID& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::chat::ExchangedMessage>* AsyncrecieveMessageRaw(::grpc::ClientContext* context, const ::chat::UserID& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::chat::ExchangedMessage>* PrepareAsyncrecieveMessageRaw(::grpc::ClientContext* context, const ::chat::UserID& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status getChats(::grpc::ClientContext* context, const ::chat::UserID& request, ::chat::Chats* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::Chats>> AsyncgetChats(::grpc::ClientContext* context, const ::chat::UserID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::Chats>>(AsyncgetChatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::Chats>> PrepareAsyncgetChats(::grpc::ClientContext* context, const ::chat::UserID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::Chats>>(PrepareAsyncgetChatsRaw(context, request, cq));
    }
    ::grpc::Status getMessages(::grpc::ClientContext* context, const ::chat::MessageChan& request, ::chat::Messages* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::Messages>> AsyncgetMessages(::grpc::ClientContext* context, const ::chat::MessageChan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::Messages>>(AsyncgetMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::Messages>> PrepareAsyncgetMessages(::grpc::ClientContext* context, const ::chat::MessageChan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::Messages>>(PrepareAsyncgetMessagesRaw(context, request, cq));
    }
    ::grpc::Status readMessage(::grpc::ClientContext* context, const ::chat::ReadMessage& request, ::chat::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::Status>> AsyncreadMessage(::grpc::ClientContext* context, const ::chat::ReadMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::Status>>(AsyncreadMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::Status>> PrepareAsyncreadMessage(::grpc::ClientContext* context, const ::chat::ReadMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::Status>>(PrepareAsyncreadMessageRaw(context, request, cq));
    }
    ::grpc::Status editChat(::grpc::ClientContext* context, const ::chat::ChatData& request, ::chat::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::Status>> AsynceditChat(::grpc::ClientContext* context, const ::chat::ChatData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::Status>>(AsynceditChatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::Status>> PrepareAsynceditChat(::grpc::ClientContext* context, const ::chat::ChatData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::Status>>(PrepareAsynceditChatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::chat::ChatData>> chatChanged(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::chat::ChatData>>(chatChangedRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::chat::ChatData>> AsyncchatChanged(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::chat::ChatData>>(AsyncchatChangedRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::chat::ChatData>> PrepareAsyncchatChanged(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::chat::ChatData>>(PrepareAsyncchatChangedRaw(context, request, cq));
    }
    ::grpc::Status sendMessage(::grpc::ClientContext* context, const ::chat::ExchangedMessage& request, ::chat::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::Status>> AsyncsendMessage(::grpc::ClientContext* context, const ::chat::ExchangedMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::Status>>(AsyncsendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::Status>> PrepareAsyncsendMessage(::grpc::ClientContext* context, const ::chat::ExchangedMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::Status>>(PrepareAsyncsendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::chat::ExchangedMessage>> recieveMessage(::grpc::ClientContext* context, const ::chat::UserID& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::chat::ExchangedMessage>>(recieveMessageRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::chat::ExchangedMessage>> AsyncrecieveMessage(::grpc::ClientContext* context, const ::chat::UserID& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::chat::ExchangedMessage>>(AsyncrecieveMessageRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::chat::ExchangedMessage>> PrepareAsyncrecieveMessage(::grpc::ClientContext* context, const ::chat::UserID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::chat::ExchangedMessage>>(PrepareAsyncrecieveMessageRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void getChats(::grpc::ClientContext* context, const ::chat::UserID* request, ::chat::Chats* response, std::function<void(::grpc::Status)>) override;
      void getChats(::grpc::ClientContext* context, const ::chat::UserID* request, ::chat::Chats* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getMessages(::grpc::ClientContext* context, const ::chat::MessageChan* request, ::chat::Messages* response, std::function<void(::grpc::Status)>) override;
      void getMessages(::grpc::ClientContext* context, const ::chat::MessageChan* request, ::chat::Messages* response, ::grpc::ClientUnaryReactor* reactor) override;
      void readMessage(::grpc::ClientContext* context, const ::chat::ReadMessage* request, ::chat::Status* response, std::function<void(::grpc::Status)>) override;
      void readMessage(::grpc::ClientContext* context, const ::chat::ReadMessage* request, ::chat::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void editChat(::grpc::ClientContext* context, const ::chat::ChatData* request, ::chat::Status* response, std::function<void(::grpc::Status)>) override;
      void editChat(::grpc::ClientContext* context, const ::chat::ChatData* request, ::chat::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void chatChanged(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::chat::ChatData>* reactor) override;
      void sendMessage(::grpc::ClientContext* context, const ::chat::ExchangedMessage* request, ::chat::Status* response, std::function<void(::grpc::Status)>) override;
      void sendMessage(::grpc::ClientContext* context, const ::chat::ExchangedMessage* request, ::chat::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void recieveMessage(::grpc::ClientContext* context, const ::chat::UserID* request, ::grpc::ClientReadReactor< ::chat::ExchangedMessage>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::chat::Chats>* AsyncgetChatsRaw(::grpc::ClientContext* context, const ::chat::UserID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chat::Chats>* PrepareAsyncgetChatsRaw(::grpc::ClientContext* context, const ::chat::UserID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chat::Messages>* AsyncgetMessagesRaw(::grpc::ClientContext* context, const ::chat::MessageChan& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chat::Messages>* PrepareAsyncgetMessagesRaw(::grpc::ClientContext* context, const ::chat::MessageChan& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chat::Status>* AsyncreadMessageRaw(::grpc::ClientContext* context, const ::chat::ReadMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chat::Status>* PrepareAsyncreadMessageRaw(::grpc::ClientContext* context, const ::chat::ReadMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chat::Status>* AsynceditChatRaw(::grpc::ClientContext* context, const ::chat::ChatData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chat::Status>* PrepareAsynceditChatRaw(::grpc::ClientContext* context, const ::chat::ChatData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::chat::ChatData>* chatChangedRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) override;
    ::grpc::ClientAsyncReader< ::chat::ChatData>* AsyncchatChangedRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::chat::ChatData>* PrepareAsyncchatChangedRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chat::Status>* AsyncsendMessageRaw(::grpc::ClientContext* context, const ::chat::ExchangedMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chat::Status>* PrepareAsyncsendMessageRaw(::grpc::ClientContext* context, const ::chat::ExchangedMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::chat::ExchangedMessage>* recieveMessageRaw(::grpc::ClientContext* context, const ::chat::UserID& request) override;
    ::grpc::ClientAsyncReader< ::chat::ExchangedMessage>* AsyncrecieveMessageRaw(::grpc::ClientContext* context, const ::chat::UserID& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::chat::ExchangedMessage>* PrepareAsyncrecieveMessageRaw(::grpc::ClientContext* context, const ::chat::UserID& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getChats_;
    const ::grpc::internal::RpcMethod rpcmethod_getMessages_;
    const ::grpc::internal::RpcMethod rpcmethod_readMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_editChat_;
    const ::grpc::internal::RpcMethod rpcmethod_chatChanged_;
    const ::grpc::internal::RpcMethod rpcmethod_sendMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_recieveMessage_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status getChats(::grpc::ServerContext* context, const ::chat::UserID* request, ::chat::Chats* response);
    virtual ::grpc::Status getMessages(::grpc::ServerContext* context, const ::chat::MessageChan* request, ::chat::Messages* response);
    virtual ::grpc::Status readMessage(::grpc::ServerContext* context, const ::chat::ReadMessage* request, ::chat::Status* response);
    virtual ::grpc::Status editChat(::grpc::ServerContext* context, const ::chat::ChatData* request, ::chat::Status* response);
    virtual ::grpc::Status chatChanged(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::chat::ChatData>* writer);
    virtual ::grpc::Status sendMessage(::grpc::ServerContext* context, const ::chat::ExchangedMessage* request, ::chat::Status* response);
    virtual ::grpc::Status recieveMessage(::grpc::ServerContext* context, const ::chat::UserID* request, ::grpc::ServerWriter< ::chat::ExchangedMessage>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_getChats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getChats() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getChats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getChats(::grpc::ServerContext* /*context*/, const ::chat::UserID* /*request*/, ::chat::Chats* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetChats(::grpc::ServerContext* context, ::chat::UserID* request, ::grpc::ServerAsyncResponseWriter< ::chat::Chats>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getMessages() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_getMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMessages(::grpc::ServerContext* /*context*/, const ::chat::MessageChan* /*request*/, ::chat::Messages* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMessages(::grpc::ServerContext* context, ::chat::MessageChan* request, ::grpc::ServerAsyncResponseWriter< ::chat::Messages>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_readMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_readMessage() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_readMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readMessage(::grpc::ServerContext* /*context*/, const ::chat::ReadMessage* /*request*/, ::chat::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestreadMessage(::grpc::ServerContext* context, ::chat::ReadMessage* request, ::grpc::ServerAsyncResponseWriter< ::chat::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_editChat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_editChat() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_editChat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status editChat(::grpc::ServerContext* /*context*/, const ::chat::ChatData* /*request*/, ::chat::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesteditChat(::grpc::ServerContext* context, ::chat::ChatData* request, ::grpc::ServerAsyncResponseWriter< ::chat::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_chatChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_chatChanged() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_chatChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status chatChanged(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::chat::ChatData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestchatChanged(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncWriter< ::chat::ChatData>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_sendMessage() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_sendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendMessage(::grpc::ServerContext* /*context*/, const ::chat::ExchangedMessage* /*request*/, ::chat::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendMessage(::grpc::ServerContext* context, ::chat::ExchangedMessage* request, ::grpc::ServerAsyncResponseWriter< ::chat::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_recieveMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_recieveMessage() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_recieveMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recieveMessage(::grpc::ServerContext* /*context*/, const ::chat::UserID* /*request*/, ::grpc::ServerWriter< ::chat::ExchangedMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrecieveMessage(::grpc::ServerContext* context, ::chat::UserID* request, ::grpc::ServerAsyncWriter< ::chat::ExchangedMessage>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getChats<WithAsyncMethod_getMessages<WithAsyncMethod_readMessage<WithAsyncMethod_editChat<WithAsyncMethod_chatChanged<WithAsyncMethod_sendMessage<WithAsyncMethod_recieveMessage<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_getChats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getChats() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::chat::UserID, ::chat::Chats>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chat::UserID* request, ::chat::Chats* response) { return this->getChats(context, request, response); }));}
    void SetMessageAllocatorFor_getChats(
        ::grpc::MessageAllocator< ::chat::UserID, ::chat::Chats>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::chat::UserID, ::chat::Chats>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getChats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getChats(::grpc::ServerContext* /*context*/, const ::chat::UserID* /*request*/, ::chat::Chats* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getChats(
      ::grpc::CallbackServerContext* /*context*/, const ::chat::UserID* /*request*/, ::chat::Chats* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getMessages() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::chat::MessageChan, ::chat::Messages>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chat::MessageChan* request, ::chat::Messages* response) { return this->getMessages(context, request, response); }));}
    void SetMessageAllocatorFor_getMessages(
        ::grpc::MessageAllocator< ::chat::MessageChan, ::chat::Messages>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::chat::MessageChan, ::chat::Messages>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMessages(::grpc::ServerContext* /*context*/, const ::chat::MessageChan* /*request*/, ::chat::Messages* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::chat::MessageChan* /*request*/, ::chat::Messages* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_readMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_readMessage() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::chat::ReadMessage, ::chat::Status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chat::ReadMessage* request, ::chat::Status* response) { return this->readMessage(context, request, response); }));}
    void SetMessageAllocatorFor_readMessage(
        ::grpc::MessageAllocator< ::chat::ReadMessage, ::chat::Status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::chat::ReadMessage, ::chat::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_readMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readMessage(::grpc::ServerContext* /*context*/, const ::chat::ReadMessage* /*request*/, ::chat::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* readMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::chat::ReadMessage* /*request*/, ::chat::Status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_editChat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_editChat() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::chat::ChatData, ::chat::Status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chat::ChatData* request, ::chat::Status* response) { return this->editChat(context, request, response); }));}
    void SetMessageAllocatorFor_editChat(
        ::grpc::MessageAllocator< ::chat::ChatData, ::chat::Status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::chat::ChatData, ::chat::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_editChat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status editChat(::grpc::ServerContext* /*context*/, const ::chat::ChatData* /*request*/, ::chat::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* editChat(
      ::grpc::CallbackServerContext* /*context*/, const ::chat::ChatData* /*request*/, ::chat::Status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_chatChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_chatChanged() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::google::protobuf::Empty, ::chat::ChatData>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request) { return this->chatChanged(context, request); }));
    }
    ~WithCallbackMethod_chatChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status chatChanged(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::chat::ChatData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::chat::ChatData>* chatChanged(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_sendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_sendMessage() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::chat::ExchangedMessage, ::chat::Status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chat::ExchangedMessage* request, ::chat::Status* response) { return this->sendMessage(context, request, response); }));}
    void SetMessageAllocatorFor_sendMessage(
        ::grpc::MessageAllocator< ::chat::ExchangedMessage, ::chat::Status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::chat::ExchangedMessage, ::chat::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_sendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendMessage(::grpc::ServerContext* /*context*/, const ::chat::ExchangedMessage* /*request*/, ::chat::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::chat::ExchangedMessage* /*request*/, ::chat::Status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_recieveMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_recieveMessage() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::chat::UserID, ::chat::ExchangedMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chat::UserID* request) { return this->recieveMessage(context, request); }));
    }
    ~WithCallbackMethod_recieveMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recieveMessage(::grpc::ServerContext* /*context*/, const ::chat::UserID* /*request*/, ::grpc::ServerWriter< ::chat::ExchangedMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::chat::ExchangedMessage>* recieveMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::chat::UserID* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_getChats<WithCallbackMethod_getMessages<WithCallbackMethod_readMessage<WithCallbackMethod_editChat<WithCallbackMethod_chatChanged<WithCallbackMethod_sendMessage<WithCallbackMethod_recieveMessage<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_getChats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getChats() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getChats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getChats(::grpc::ServerContext* /*context*/, const ::chat::UserID* /*request*/, ::chat::Chats* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getMessages() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_getMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMessages(::grpc::ServerContext* /*context*/, const ::chat::MessageChan* /*request*/, ::chat::Messages* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_readMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_readMessage() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_readMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readMessage(::grpc::ServerContext* /*context*/, const ::chat::ReadMessage* /*request*/, ::chat::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_editChat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_editChat() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_editChat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status editChat(::grpc::ServerContext* /*context*/, const ::chat::ChatData* /*request*/, ::chat::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_chatChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_chatChanged() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_chatChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status chatChanged(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::chat::ChatData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_sendMessage() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_sendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendMessage(::grpc::ServerContext* /*context*/, const ::chat::ExchangedMessage* /*request*/, ::chat::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_recieveMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_recieveMessage() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_recieveMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recieveMessage(::grpc::ServerContext* /*context*/, const ::chat::UserID* /*request*/, ::grpc::ServerWriter< ::chat::ExchangedMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_getChats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getChats() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_getChats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getChats(::grpc::ServerContext* /*context*/, const ::chat::UserID* /*request*/, ::chat::Chats* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetChats(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getMessages() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_getMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMessages(::grpc::ServerContext* /*context*/, const ::chat::MessageChan* /*request*/, ::chat::Messages* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMessages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_readMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_readMessage() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_readMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readMessage(::grpc::ServerContext* /*context*/, const ::chat::ReadMessage* /*request*/, ::chat::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestreadMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_editChat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_editChat() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_editChat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status editChat(::grpc::ServerContext* /*context*/, const ::chat::ChatData* /*request*/, ::chat::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesteditChat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_chatChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_chatChanged() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_chatChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status chatChanged(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::chat::ChatData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestchatChanged(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_sendMessage() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_sendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendMessage(::grpc::ServerContext* /*context*/, const ::chat::ExchangedMessage* /*request*/, ::chat::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_recieveMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_recieveMessage() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_recieveMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recieveMessage(::grpc::ServerContext* /*context*/, const ::chat::UserID* /*request*/, ::grpc::ServerWriter< ::chat::ExchangedMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrecieveMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getChats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getChats() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getChats(context, request, response); }));
    }
    ~WithRawCallbackMethod_getChats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getChats(::grpc::ServerContext* /*context*/, const ::chat::UserID* /*request*/, ::chat::Chats* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getChats(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getMessages() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getMessages(context, request, response); }));
    }
    ~WithRawCallbackMethod_getMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMessages(::grpc::ServerContext* /*context*/, const ::chat::MessageChan* /*request*/, ::chat::Messages* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_readMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_readMessage() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->readMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_readMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readMessage(::grpc::ServerContext* /*context*/, const ::chat::ReadMessage* /*request*/, ::chat::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* readMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_editChat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_editChat() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->editChat(context, request, response); }));
    }
    ~WithRawCallbackMethod_editChat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status editChat(::grpc::ServerContext* /*context*/, const ::chat::ChatData* /*request*/, ::chat::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* editChat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_chatChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_chatChanged() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->chatChanged(context, request); }));
    }
    ~WithRawCallbackMethod_chatChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status chatChanged(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::chat::ChatData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* chatChanged(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_sendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_sendMessage() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->sendMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_sendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendMessage(::grpc::ServerContext* /*context*/, const ::chat::ExchangedMessage* /*request*/, ::chat::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_recieveMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_recieveMessage() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->recieveMessage(context, request); }));
    }
    ~WithRawCallbackMethod_recieveMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recieveMessage(::grpc::ServerContext* /*context*/, const ::chat::UserID* /*request*/, ::grpc::ServerWriter< ::chat::ExchangedMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* recieveMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getChats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getChats() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::chat::UserID, ::chat::Chats>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::chat::UserID, ::chat::Chats>* streamer) {
                       return this->StreamedgetChats(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getChats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getChats(::grpc::ServerContext* /*context*/, const ::chat::UserID* /*request*/, ::chat::Chats* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetChats(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chat::UserID,::chat::Chats>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getMessages() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::chat::MessageChan, ::chat::Messages>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::chat::MessageChan, ::chat::Messages>* streamer) {
                       return this->StreamedgetMessages(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getMessages(::grpc::ServerContext* /*context*/, const ::chat::MessageChan* /*request*/, ::chat::Messages* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetMessages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chat::MessageChan,::chat::Messages>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_readMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_readMessage() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::chat::ReadMessage, ::chat::Status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::chat::ReadMessage, ::chat::Status>* streamer) {
                       return this->StreamedreadMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_readMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status readMessage(::grpc::ServerContext* /*context*/, const ::chat::ReadMessage* /*request*/, ::chat::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedreadMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chat::ReadMessage,::chat::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_editChat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_editChat() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::chat::ChatData, ::chat::Status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::chat::ChatData, ::chat::Status>* streamer) {
                       return this->StreamededitChat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_editChat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status editChat(::grpc::ServerContext* /*context*/, const ::chat::ChatData* /*request*/, ::chat::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamededitChat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chat::ChatData,::chat::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_sendMessage() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::chat::ExchangedMessage, ::chat::Status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::chat::ExchangedMessage, ::chat::Status>* streamer) {
                       return this->StreamedsendMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_sendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendMessage(::grpc::ServerContext* /*context*/, const ::chat::ExchangedMessage* /*request*/, ::chat::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chat::ExchangedMessage,::chat::Status>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getChats<WithStreamedUnaryMethod_getMessages<WithStreamedUnaryMethod_readMessage<WithStreamedUnaryMethod_editChat<WithStreamedUnaryMethod_sendMessage<Service > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_chatChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_chatChanged() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::google::protobuf::Empty, ::chat::ChatData>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::google::protobuf::Empty, ::chat::ChatData>* streamer) {
                       return this->StreamedchatChanged(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_chatChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status chatChanged(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::chat::ChatData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedchatChanged(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::google::protobuf::Empty,::chat::ChatData>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_recieveMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_recieveMessage() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::chat::UserID, ::chat::ExchangedMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::chat::UserID, ::chat::ExchangedMessage>* streamer) {
                       return this->StreamedrecieveMessage(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_recieveMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status recieveMessage(::grpc::ServerContext* /*context*/, const ::chat::UserID* /*request*/, ::grpc::ServerWriter< ::chat::ExchangedMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedrecieveMessage(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::chat::UserID,::chat::ExchangedMessage>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_chatChanged<WithSplitStreamingMethod_recieveMessage<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_getChats<WithStreamedUnaryMethod_getMessages<WithStreamedUnaryMethod_readMessage<WithStreamedUnaryMethod_editChat<WithSplitStreamingMethod_chatChanged<WithStreamedUnaryMethod_sendMessage<WithSplitStreamingMethod_recieveMessage<Service > > > > > > > StreamedService;
};

}  // namespace chat


#endif  // GRPC_chat_5fservice_2eproto__INCLUDED
