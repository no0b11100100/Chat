// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: chat_service.proto

package api

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	GetChats(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Chats, error)
	GetMessages(ctx context.Context, in *MessageChan, opts ...grpc.CallOption) (*Messages, error)
	ReadMessage(ctx context.Context, in *ReadMessage, opts ...grpc.CallOption) (*Status, error)
	EditChat(ctx context.Context, in *ChatData, opts ...grpc.CallOption) (*Status, error)
	ChatChanged(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Chat_ChatChangedClient, error)
	SendMessage(ctx context.Context, in *ExchangedMessage, opts ...grpc.CallOption) (*Status, error)
	RecieveMessage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Chat_RecieveMessageClient, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) GetChats(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Chats, error) {
	out := new(Chats)
	err := c.cc.Invoke(ctx, "/chat.Chat/getChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetMessages(ctx context.Context, in *MessageChan, opts ...grpc.CallOption) (*Messages, error) {
	out := new(Messages)
	err := c.cc.Invoke(ctx, "/chat.Chat/getMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) ReadMessage(ctx context.Context, in *ReadMessage, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/chat.Chat/readMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) EditChat(ctx context.Context, in *ChatData, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/chat.Chat/editChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) ChatChanged(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Chat_ChatChangedClient, error) {
	stream, err := c.cc.NewStream(ctx, &Chat_ServiceDesc.Streams[0], "/chat.Chat/chatChanged", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatChatChangedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Chat_ChatChangedClient interface {
	Recv() (*ChatData, error)
	grpc.ClientStream
}

type chatChatChangedClient struct {
	grpc.ClientStream
}

func (x *chatChatChangedClient) Recv() (*ChatData, error) {
	m := new(ChatData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatClient) SendMessage(ctx context.Context, in *ExchangedMessage, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/chat.Chat/sendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) RecieveMessage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Chat_RecieveMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &Chat_ServiceDesc.Streams[1], "/chat.Chat/recieveMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatRecieveMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Chat_RecieveMessageClient interface {
	Recv() (*ExchangedMessage, error)
	grpc.ClientStream
}

type chatRecieveMessageClient struct {
	grpc.ClientStream
}

func (x *chatRecieveMessageClient) Recv() (*ExchangedMessage, error) {
	m := new(ExchangedMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServer is the server API for Chat service.
// All implementations must embed UnimplementedChatServer
// for forward compatibility
type ChatServer interface {
	GetChats(context.Context, *UserID) (*Chats, error)
	GetMessages(context.Context, *MessageChan) (*Messages, error)
	ReadMessage(context.Context, *ReadMessage) (*Status, error)
	EditChat(context.Context, *ChatData) (*Status, error)
	ChatChanged(*empty.Empty, Chat_ChatChangedServer) error
	SendMessage(context.Context, *ExchangedMessage) (*Status, error)
	RecieveMessage(*empty.Empty, Chat_RecieveMessageServer) error
	mustEmbedUnimplementedChatServer()
}

// UnimplementedChatServer must be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (UnimplementedChatServer) GetChats(context.Context, *UserID) (*Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChats not implemented")
}
func (UnimplementedChatServer) GetMessages(context.Context, *MessageChan) (*Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedChatServer) ReadMessage(context.Context, *ReadMessage) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMessage not implemented")
}
func (UnimplementedChatServer) EditChat(context.Context, *ChatData) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChat not implemented")
}
func (UnimplementedChatServer) ChatChanged(*empty.Empty, Chat_ChatChangedServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatChanged not implemented")
}
func (UnimplementedChatServer) SendMessage(context.Context, *ExchangedMessage) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedChatServer) RecieveMessage(*empty.Empty, Chat_RecieveMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method RecieveMessage not implemented")
}
func (UnimplementedChatServer) mustEmbedUnimplementedChatServer() {}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	s.RegisterService(&Chat_ServiceDesc, srv)
}

func _Chat_GetChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/getChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetChats(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageChan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/getMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetMessages(ctx, req.(*MessageChan))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_ReadMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).ReadMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/readMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).ReadMessage(ctx, req.(*ReadMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_EditChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).EditChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/editChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).EditChat(ctx, req.(*ChatData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_ChatChanged_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServer).ChatChanged(m, &chatChatChangedServer{stream})
}

type Chat_ChatChangedServer interface {
	Send(*ChatData) error
	grpc.ServerStream
}

type chatChatChangedServer struct {
	grpc.ServerStream
}

func (x *chatChatChangedServer) Send(m *ChatData) error {
	return x.ServerStream.SendMsg(m)
}

func _Chat_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/sendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SendMessage(ctx, req.(*ExchangedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_RecieveMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServer).RecieveMessage(m, &chatRecieveMessageServer{stream})
}

type Chat_RecieveMessageServer interface {
	Send(*ExchangedMessage) error
	grpc.ServerStream
}

type chatRecieveMessageServer struct {
	grpc.ServerStream
}

func (x *chatRecieveMessageServer) Send(m *ExchangedMessage) error {
	return x.ServerStream.SendMsg(m)
}

// Chat_ServiceDesc is the grpc.ServiceDesc for Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getChats",
			Handler:    _Chat_GetChats_Handler,
		},
		{
			MethodName: "getMessages",
			Handler:    _Chat_GetMessages_Handler,
		},
		{
			MethodName: "readMessage",
			Handler:    _Chat_ReadMessage_Handler,
		},
		{
			MethodName: "editChat",
			Handler:    _Chat_EditChat_Handler,
		},
		{
			MethodName: "sendMessage",
			Handler:    _Chat_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "chatChanged",
			Handler:       _Chat_ChatChanged_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "recieveMessage",
			Handler:       _Chat_RecieveMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chat_service.proto",
}
