// Code generated by goqface. DO NOT EDIT.
package api

import (
	"bufio"
	"encoding/json"
	"fmt"
	"net"
	"net/textproto"
)

//enums

// structs
type UserInfo struct {
	Name     string   `json:"name",omitempty bson:"name"`
	NickName string   `json:"nickname",omitempty bson:"nickname"`
	Photo    string   `json:"photo",omitempty bson:"photo"`
	Chats    []string `json:"chats",omitempty bson:"chats"`
	Email    string   `json:"email",omitempty bson:"email"`
	Password string   `json:"password",omitempty bson:"password"`
}

type UserInfoTagger struct {
	Name     string
	NickName string
	Photo    string
	Chats    string
	Email    string
	Password string
}

func UserInfoTags() UserInfoTagger {
	return UserInfoTagger{
		Name:     "name",
		NickName: "nickname",
		Photo:    "photo",
		Chats:    "chats",
		Email:    "email",
		Password: "password",
	}
}

type Response struct {
	Info          UserInfo       `json:"info",omitempty bson:"info"`
	Status        ResponseStatus `json:"status",omitempty bson:"status"`
	StatusMessage string         `json:"statusmessage",omitempty bson:"statusmessage"`
}

type ResponseTagger struct {
	Info          string
	Status        string
	StatusMessage string
}

func ResponseTags() ResponseTagger {
	return ResponseTagger{
		Info:          "info",
		Status:        "status",
		StatusMessage: "statusmessage",
	}
}

type SignIn struct {
	Email    string `json:"email",omitempty bson:"email"`
	Password string `json:"password",omitempty bson:"password"`
}

type SignInTagger struct {
	Email    string
	Password string
}

func SignInTags() SignInTagger {
	return SignInTagger{
		Email:    "email",
		Password: "password",
	}
}

type SignUp struct {
	Name              string `json:"name",omitempty bson:"name"`
	NickName          string `json:"nickname",omitempty bson:"nickname"`
	Email             string `json:"email",omitempty bson:"email"`
	Password          string `json:"password",omitempty bson:"password"`
	ConfirmedPassword string `json:"confirmedpassword",omitempty bson:"confirmedpassword"`
	Photo             string `json:"photo",omitempty bson:"photo"`
}

type SignUpTagger struct {
	Name              string
	NickName          string
	Email             string
	Password          string
	ConfirmedPassword string
	Photo             string
}

func SignUpTags() SignUpTagger {
	return SignUpTagger{
		Name:              "name",
		NickName:          "nickname",
		Email:             "email",
		Password:          "password",
		ConfirmedPassword: "confirmedpassword",
		Photo:             "photo",
	}
}

// server
type UserServiceConnectionCallback = func(string, UserServiceNotifier)

type UserServiceServerImpl interface {
	SignIn(ServerContext, SignIn) Response
	SignUp(ServerContext, SignUp) Response
}

type UserServiceNotifier interface {
}

type UserServiceNotificator struct {
	conn net.Conn
}

type UserServiceServer struct {
	listener              net.Listener
	impl                  UserServiceServerImpl
	notifierObservers     []UserServiceConnectionCallback
	disconectionObservers []disconnectionCallback
	connections           map[string]string
}

func NewUserServiceServer(addr string) *UserServiceServer {
	ln, _ := net.Listen("tcp", addr)
	server := &UserServiceServer{
		listener:              ln,
		notifierObservers:     make([]UserServiceConnectionCallback, 0),
		disconectionObservers: make([]disconnectionCallback, 0),
		connections:           make(map[string]string),
	}

	return server
}

func (s *UserServiceServer) Stop() {
	if err := s.listener.Close(); err != nil {
		fmt.Println("UserServiceServer Stop error:", err)
	}
}

func (s *UserServiceServer) SetServerImpl(impl UserServiceServerImpl) {
	s.impl = impl
}

func (s *UserServiceServer) Serve() {
	for {
		conn, err := s.listener.Accept()
		if err != nil {
			fmt.Println("Accept error:", err)
		}

		go s.processConnection(conn)
	}
}

func (s *UserServiceServer) processNewConnection(conn net.Conn, payload string) {
	if _, ok := s.connections[conn.RemoteAddr().String()]; ok {
		return
	}
	recievedMessage := MessageData{}
	json.Unmarshal([]byte(payload), &recievedMessage)
	s.connections[conn.RemoteAddr().String()] = recievedMessage.ConnectionID
	s.emitNewConnectionEvent(conn, recievedMessage.ConnectionID)
}

func (s *UserServiceServer) processConnection(conn net.Conn) {
	fmt.Println("Accept connection in UserServiceServer:", conn.RemoteAddr().String())
	defer conn.Close()
	defer func() { s.emitDisconnectionEvent(conn, s.connections[conn.RemoteAddr().String()]) }()

	for {
		reader := bufio.NewReader(conn)
		tp := textproto.NewReader(reader)

		data, err := tp.ReadLine()
		s.processNewConnection(conn, data)

		if err != nil {
			fmt.Println("processConnection error", err)
			break
		}

		fmt.Println("processConnection message", data)
		s.handleCommand(data, conn)
	}
}

func (s *UserServiceServer) handleCommand(payload string, conn net.Conn) {
	recievedMessage := MessageData{}
	json.Unmarshal([]byte(payload), &recievedMessage)
	switch recievedMessage.Endpoint {
	case "UserService.SignIn":
		args := make([]json.RawMessage, 0)
		json.Unmarshal(recievedMessage.Payload, &args)
		var index int

		var data SignIn
		json.Unmarshal(args[index], &data)
		index++

		serverContex := ServerContext{ConnectionID: recievedMessage.ConnectionID, ConnectionAddress: conn.RemoteAddr().String()}
		response := s.impl.SignIn(serverContex, data)
		bytes, _ := json.Marshal(response)
		messageToSend := recievedMessage
		messageToSend.Payload = json.RawMessage(bytes)
		responseData, _ := json.Marshal(messageToSend)
		responseData = append(responseData, '\n')
		conn.Write(responseData)
	case "UserService.SignUp":
		args := make([]json.RawMessage, 0)
		json.Unmarshal(recievedMessage.Payload, &args)
		var index int

		var data SignUp
		json.Unmarshal(args[index], &data)
		index++

		serverContex := ServerContext{ConnectionID: recievedMessage.ConnectionID, ConnectionAddress: conn.RemoteAddr().String()}
		response := s.impl.SignUp(serverContex, data)
		bytes, _ := json.Marshal(response)
		messageToSend := recievedMessage
		messageToSend.Payload = json.RawMessage(bytes)
		responseData, _ := json.Marshal(messageToSend)
		responseData = append(responseData, '\n')
		conn.Write(responseData)
	}
}

// Events
func (s *UserServiceServer) SubscribeToNewConnectionEvent(observer UserServiceConnectionCallback) {
	s.notifierObservers = append(s.notifierObservers, observer)
}

func (s *UserServiceServer) SubscribeToDisconnectionEvent(observer disconnectionCallback) {
	s.disconectionObservers = append(s.disconectionObservers, observer)
}

func (s *UserServiceServer) emitNewConnectionEvent(conn net.Conn, connectionID string) {
	notificator := &UserServiceNotificator{conn: conn}

	for _, callback := range s.notifierObservers {
		callback(connectionID, notificator)
	}
}

func (s *UserServiceServer) emitDisconnectionEvent(conn net.Conn, connectionID string) {
	for _, callback := range s.disconectionObservers {
		callback(connectionID)
	}
}
