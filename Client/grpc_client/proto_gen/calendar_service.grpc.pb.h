// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: calendar_service.proto
#ifndef GRPC_calendar_5fservice_2eproto__INCLUDED
#define GRPC_calendar_5fservice_2eproto__INCLUDED

#include "calendar_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace calendar {

class CalendarService final {
 public:
  static constexpr char const* service_full_name() {
    return "calendar.CalendarService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status sendEvent(::grpc::ClientContext* context, const ::calendar::Event& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncsendEvent(::grpc::ClientContext* context, const ::calendar::Event& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncsendEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncsendEvent(::grpc::ClientContext* context, const ::calendar::Event& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncsendEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::calendar::Event>> recieveEvent(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::calendar::Event>>(recieveEventRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::calendar::Event>> AsyncrecieveEvent(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::calendar::Event>>(AsyncrecieveEventRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::calendar::Event>> PrepareAsyncrecieveEvent(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::calendar::Event>>(PrepareAsyncrecieveEventRaw(context, request, cq));
    }
    virtual ::grpc::Status getEvents(::grpc::ClientContext* context, const ::calendar::Week& request, ::calendar::Events* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calendar::Events>> AsyncgetEvents(::grpc::ClientContext* context, const ::calendar::Week& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calendar::Events>>(AsyncgetEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calendar::Events>> PrepareAsyncgetEvents(::grpc::ClientContext* context, const ::calendar::Week& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calendar::Events>>(PrepareAsyncgetEventsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void sendEvent(::grpc::ClientContext* context, const ::calendar::Event* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendEvent(::grpc::ClientContext* context, const ::calendar::Event* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void recieveEvent(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::calendar::Event>* reactor) = 0;
      virtual void getEvents(::grpc::ClientContext* context, const ::calendar::Week* request, ::calendar::Events* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getEvents(::grpc::ClientContext* context, const ::calendar::Week* request, ::calendar::Events* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncsendEventRaw(::grpc::ClientContext* context, const ::calendar::Event& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncsendEventRaw(::grpc::ClientContext* context, const ::calendar::Event& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::calendar::Event>* recieveEventRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::calendar::Event>* AsyncrecieveEventRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::calendar::Event>* PrepareAsyncrecieveEventRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calendar::Events>* AsyncgetEventsRaw(::grpc::ClientContext* context, const ::calendar::Week& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calendar::Events>* PrepareAsyncgetEventsRaw(::grpc::ClientContext* context, const ::calendar::Week& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status sendEvent(::grpc::ClientContext* context, const ::calendar::Event& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncsendEvent(::grpc::ClientContext* context, const ::calendar::Event& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncsendEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncsendEvent(::grpc::ClientContext* context, const ::calendar::Event& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncsendEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::calendar::Event>> recieveEvent(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::calendar::Event>>(recieveEventRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::calendar::Event>> AsyncrecieveEvent(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::calendar::Event>>(AsyncrecieveEventRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::calendar::Event>> PrepareAsyncrecieveEvent(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::calendar::Event>>(PrepareAsyncrecieveEventRaw(context, request, cq));
    }
    ::grpc::Status getEvents(::grpc::ClientContext* context, const ::calendar::Week& request, ::calendar::Events* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calendar::Events>> AsyncgetEvents(::grpc::ClientContext* context, const ::calendar::Week& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calendar::Events>>(AsyncgetEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calendar::Events>> PrepareAsyncgetEvents(::grpc::ClientContext* context, const ::calendar::Week& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calendar::Events>>(PrepareAsyncgetEventsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void sendEvent(::grpc::ClientContext* context, const ::calendar::Event* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void sendEvent(::grpc::ClientContext* context, const ::calendar::Event* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void recieveEvent(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::calendar::Event>* reactor) override;
      void getEvents(::grpc::ClientContext* context, const ::calendar::Week* request, ::calendar::Events* response, std::function<void(::grpc::Status)>) override;
      void getEvents(::grpc::ClientContext* context, const ::calendar::Week* request, ::calendar::Events* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncsendEventRaw(::grpc::ClientContext* context, const ::calendar::Event& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncsendEventRaw(::grpc::ClientContext* context, const ::calendar::Event& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::calendar::Event>* recieveEventRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) override;
    ::grpc::ClientAsyncReader< ::calendar::Event>* AsyncrecieveEventRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::calendar::Event>* PrepareAsyncrecieveEventRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calendar::Events>* AsyncgetEventsRaw(::grpc::ClientContext* context, const ::calendar::Week& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calendar::Events>* PrepareAsyncgetEventsRaw(::grpc::ClientContext* context, const ::calendar::Week& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_sendEvent_;
    const ::grpc::internal::RpcMethod rpcmethod_recieveEvent_;
    const ::grpc::internal::RpcMethod rpcmethod_getEvents_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status sendEvent(::grpc::ServerContext* context, const ::calendar::Event* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status recieveEvent(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::calendar::Event>* writer);
    virtual ::grpc::Status getEvents(::grpc::ServerContext* context, const ::calendar::Week* request, ::calendar::Events* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_sendEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_sendEvent() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_sendEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendEvent(::grpc::ServerContext* /*context*/, const ::calendar::Event* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendEvent(::grpc::ServerContext* context, ::calendar::Event* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_recieveEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_recieveEvent() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_recieveEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recieveEvent(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::calendar::Event>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrecieveEvent(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncWriter< ::calendar::Event>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getEvents() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEvents(::grpc::ServerContext* /*context*/, const ::calendar::Week* /*request*/, ::calendar::Events* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetEvents(::grpc::ServerContext* context, ::calendar::Week* request, ::grpc::ServerAsyncResponseWriter< ::calendar::Events>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_sendEvent<WithAsyncMethod_recieveEvent<WithAsyncMethod_getEvents<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_sendEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_sendEvent() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::calendar::Event, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::calendar::Event* request, ::google::protobuf::Empty* response) { return this->sendEvent(context, request, response); }));}
    void SetMessageAllocatorFor_sendEvent(
        ::grpc::MessageAllocator< ::calendar::Event, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::calendar::Event, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_sendEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendEvent(::grpc::ServerContext* /*context*/, const ::calendar::Event* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendEvent(
      ::grpc::CallbackServerContext* /*context*/, const ::calendar::Event* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_recieveEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_recieveEvent() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::google::protobuf::Empty, ::calendar::Event>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request) { return this->recieveEvent(context, request); }));
    }
    ~WithCallbackMethod_recieveEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recieveEvent(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::calendar::Event>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::calendar::Event>* recieveEvent(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getEvents() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::calendar::Week, ::calendar::Events>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::calendar::Week* request, ::calendar::Events* response) { return this->getEvents(context, request, response); }));}
    void SetMessageAllocatorFor_getEvents(
        ::grpc::MessageAllocator< ::calendar::Week, ::calendar::Events>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::calendar::Week, ::calendar::Events>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEvents(::grpc::ServerContext* /*context*/, const ::calendar::Week* /*request*/, ::calendar::Events* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::calendar::Week* /*request*/, ::calendar::Events* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_sendEvent<WithCallbackMethod_recieveEvent<WithCallbackMethod_getEvents<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_sendEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_sendEvent() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_sendEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendEvent(::grpc::ServerContext* /*context*/, const ::calendar::Event* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_recieveEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_recieveEvent() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_recieveEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recieveEvent(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::calendar::Event>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getEvents() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEvents(::grpc::ServerContext* /*context*/, const ::calendar::Week* /*request*/, ::calendar::Events* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_sendEvent() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_sendEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendEvent(::grpc::ServerContext* /*context*/, const ::calendar::Event* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendEvent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_recieveEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_recieveEvent() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_recieveEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recieveEvent(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::calendar::Event>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrecieveEvent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getEvents() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEvents(::grpc::ServerContext* /*context*/, const ::calendar::Week* /*request*/, ::calendar::Events* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_sendEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_sendEvent() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->sendEvent(context, request, response); }));
    }
    ~WithRawCallbackMethod_sendEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendEvent(::grpc::ServerContext* /*context*/, const ::calendar::Event* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendEvent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_recieveEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_recieveEvent() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->recieveEvent(context, request); }));
    }
    ~WithRawCallbackMethod_recieveEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recieveEvent(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::calendar::Event>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* recieveEvent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getEvents() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getEvents(context, request, response); }));
    }
    ~WithRawCallbackMethod_getEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEvents(::grpc::ServerContext* /*context*/, const ::calendar::Week* /*request*/, ::calendar::Events* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_sendEvent() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::calendar::Event, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::calendar::Event, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedsendEvent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_sendEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendEvent(::grpc::ServerContext* /*context*/, const ::calendar::Event* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendEvent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::calendar::Event,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getEvents() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::calendar::Week, ::calendar::Events>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::calendar::Week, ::calendar::Events>* streamer) {
                       return this->StreamedgetEvents(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getEvents(::grpc::ServerContext* /*context*/, const ::calendar::Week* /*request*/, ::calendar::Events* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetEvents(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::calendar::Week,::calendar::Events>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_sendEvent<WithStreamedUnaryMethod_getEvents<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_recieveEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_recieveEvent() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::google::protobuf::Empty, ::calendar::Event>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::google::protobuf::Empty, ::calendar::Event>* streamer) {
                       return this->StreamedrecieveEvent(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_recieveEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status recieveEvent(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::calendar::Event>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedrecieveEvent(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::google::protobuf::Empty,::calendar::Event>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_recieveEvent<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_sendEvent<WithSplitStreamingMethod_recieveEvent<WithStreamedUnaryMethod_getEvents<Service > > > StreamedService;
};

}  // namespace calendar


#endif  // GRPC_calendar_5fservice_2eproto__INCLUDED
